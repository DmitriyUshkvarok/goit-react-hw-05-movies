{"version":3,"file":"static/js/309.454393eb.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/pages/MoviesPage/MoviePage.module.css?dc7a","webpack://react-homework-template/./src/components/Searchbar/Searchbar.module.css?8d9e","components/Searchbar/Searchbar.jsx","webpack://react-homework-template/./src/components/MoviesBar/MoviesBar.module.css?9446","webpack://react-homework-template/./src/components/SearchByYear/SearchByYear.module.css?3dbb","components/ButtonLoadMore/ButtonLoadMore.module.css","components/ButtonLoadMore/ButtonLoadMore.jsx","components/SearchByYear/SearchByYear.jsx","components/MoviesBar/MoviesBar.jsx","pages/MoviesPage/MoviePage.jsx","service/kino-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__P6SP5\",\"moviesItem\":\"MoviesList_moviesItem__r+0sq\"};","import styled, { css } from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const ImgWrapper = styled.div`\n  overflow: hidden;\n  margin-bottom: 5px;\n`;\n\nexport const MoviesImg = styled.img`\n  max-width: 100%;\n  object-fit: cover;\n  transition: transform 0.4s;\n  -webkit-transition: transform 0.4s;\n  -moz-transition: transform 0.4s;\n  -ms-transition: transform 0.4s;\n  -o-transition: transform 0.4s;\n\n  &:hover {\n    transform: scale(1.1);\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n  }\n`;\n\nexport const CardTitle = styled.h3`\n  max-width: 300px;\n  color: aqua;\n  font-size: 14px;\n  margin-bottom: 0;\n  margin-top: auto;\n`;\n\nexport const RatingStarsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const GoldStar = styled.span`\n  font-size: 10px;\n  color: gold;\n`;\n\nexport const GrayStar = styled.span`\n  font-size: 10px;\n  color: gray;\n`;\n\nexport const RatingText = styled.p`\n  color: rgb(36, 35, 35);\n  font-size: 10px;\n`;\n\nexport const RatingNumber = styled.span`\n  font-size: 8px;\n`;\n\nexport const MoviesYear = styled.p`\n  color: red;\n  font-weight: bold;\n  font-size: 12px;\n  margin-left: auto;\n`;\n\n/* Задаем разные цвета для рейтингов */\nexport const red = css`\n  background: #f85032;\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\n  background: linear-gradient(to right, #e73827, #f85032);\n`;\n\nexport const yellow = css`\n  background: #f7971e;\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\n  background: linear-gradient(to right, #ffd200, #f7971e);\n  color: rgb(36, 35, 35);\n`;\n\nexport const green = css`\n  background: #000000;\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\n  background: linear-gradient(to right, #0f9b0f, #000000);\n  color: #fff;\n`;\n\nexport const RatingBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  width: 10px;\n  heigth: 10px;\n  padding: 5px;\n  font-weight: bold;\n  margin-left: 10px;\n\n  // добавляем стили для класса rating-red\n  &.rating-red {\n    ${red}\n  }\n\n  // добавляем стили для класса rating-yellow\n  &.rating-yellow {\n    ${yellow}\n  }\n\n  // добавляем стили для класса rating-green\n  &.rating-green {\n    ${green}\n  }\n`;\n","import {\n  CardWrapper,\n  ImgWrapper,\n  MoviesImg,\n  CardTitle,\n  RatingStarsContainer,\n  GoldStar,\n  GrayStar,\n  RatingText,\n  RatingNumber,\n  RatingBlock,\n  MoviesYear,\n} from './MoviesItem.styled';\n\nfunction MoviesItem({ poster_path, title, vote_average, release_date }) {\n  const percentRating = vote_average * 10; // convert 0-10 rating to percentage\n  const goldStars = Math.floor(percentRating / 10); // number of gold stars\n  // eslint-disable-next-line no-unused-vars\n  const grayStars = 10 - goldStars; // number of gray stars\n\n  // create an array of stars with the appropriate color\n  const ratingStars = Array.from({ length: 10 }, (_, i) => {\n    if (i < goldStars) {\n      return <GoldStar key={`star-${i}`}>&#9733;</GoldStar>;\n    } else {\n      return <GrayStar key={`star-${i}`}>&#9733;</GrayStar>;\n    }\n  });\n\n  const getRatingColor = vote_average => {\n    if (vote_average <= 4) {\n      return 'red';\n    } else if (vote_average < 7) {\n      return 'yellow';\n    } else {\n      return 'green';\n    }\n  };\n\n  const ratingColor = getRatingColor(vote_average);\n  const ratingClassName = `rating-${ratingColor}`;\n\n  return (\n    <>\n      <CardWrapper>\n        <ImgWrapper>\n          <MoviesImg\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                : 'https://via.placeholder.com/300x400'\n            }\n            alt={title}\n            width={300}\n          />\n        </ImgWrapper>\n        <CardTitle>{title ? title : 'Movie without a title'}</CardTitle>\n        <RatingStarsContainer>\n          <RatingText>{vote_average ? ratingStars : 'N/A'}</RatingText>\n          <RatingBlock className={ratingClassName}>\n            <RatingNumber>\n              {vote_average ? vote_average.toFixed(1) : 'N/A'}\n            </RatingNumber>\n          </RatingBlock>\n          <MoviesYear>\n            {release_date ? release_date.slice(0, 4) : 'N/A'}\n          </MoviesYear>\n        </RatingStarsContainer>\n      </CardWrapper>\n    </>\n  );\n}\n\nexport default MoviesItem;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MoviesList.module.css';\nimport MoviesItem from 'components/MoviesItem/MoviesItem';\n\nfunction MoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <ul className={css.moviesList}>\n      {movies.map(\n        ({ id, poster_path, title, vote_average, release_date }, index) => (\n          <li key={`${id}-${index}`} className={css.moviesItem}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <MoviesItem\n                key={id}\n                id={id}\n                poster_path={poster_path}\n                title={title}\n                vote_average={vote_average}\n                release_date={release_date}\n              />\n            </Link>\n          </li>\n        )\n      )}\n    </ul>\n  );\n}\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"MoviePage_searchbar__Hfnpz\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"Searchbar_form__D-hp5\",\"inputSearch\":\"Searchbar_inputSearch__xAbPo\",\"serchBtn\":\"Searchbar_serchBtn__JmOW6\"};","import { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport css from './Searchbar.module.css';\nimport { useState } from 'react';\n\nfunction Searchbar({ onSubmit }) {\n  const [query, setQuery] = useState('');\n\n  const handleQueryChange = e => {\n    setQuery(e.currentTarget.value.toLowerCase().trim());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    if (!query) {\n      toast.error('Please, enter your name movie!');\n      return;\n    }\n\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleSubmit}>\n      <input\n        className={css.inputSearch}\n        name=\"query\"\n        value={query}\n        type=\"text\"\n        autoComplete=\"off\"\n        placeholder=\"Enter the movie name\"\n        onChange={handleQueryChange}\n      />\n      <button type=\"submit\" className={css.serchBtn}>\n        Search\n      </button>\n    </form>\n  );\n}\n\nexport default Searchbar;\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"movieBarList\":\"MoviesBar_movieBarList__OTYcq\",\"movieBarListItem\":\"MoviesBar_movieBarListItem__e8kT6\"};","// extracted by mini-css-extract-plugin\nexport default {\"selectedYear\":\"SearchByYear_selectedYear__3bTgh\",\"selectLabel\":\"SearchByYear_selectLabel__tWzcV\",\"searchText\":\"SearchByYear_searchText__5iNfz\",\"selectYear\":\"SearchByYear_selectYear__5Gye4\",\"selectIcon\":\"SearchByYear_selectIcon__PBBt+\",\"css-b62m3t-container\":\"SearchByYear_css-b62m3t-container__o2MPF\"};","// extracted by mini-css-extract-plugin\nexport default {};","import PropTypes from 'prop-types';\nimport css from './ButtonLoadMore.module.css';\n\nconst ButtonLoadMore = ({ hendleIncrement }) => {\n  return (\n    <div>\n      <button\n        className={css.btnLoadMore}\n        type=\"button\"\n        onClick={() => hendleIncrement()}\n      >\n        Load More\n      </button>\n    </div>\n  );\n};\n\nexport default ButtonLoadMore;\n\nButtonLoadMore.propTypes = {\n  handleIncrement: PropTypes.func,\n};\n","import { useState, useEffect } from 'react';\nimport css from './SearchByYear.module.css';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport ButtonLoadMore from 'components/ButtonLoadMore/ButtonLoadMore';\nimport Select from 'react-select';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFilm } from '@fortawesome/free-solid-svg-icons';\n\nfunction SearchByYears() {\n  const [selectedYear, setSelectedYear] = useState(0);\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [page, setPage] = useState(1);\n  const [showButton, setShowButton] = useState(false);\n\n  useEffect(() => {\n    if (selectedYear !== 0) {\n      const fetchMovies = async () => {\n        setLoading(true);\n        setShowButton(true);\n        try {\n          const newYear = await apiTheMovieDB.fetchByYear(page, selectedYear);\n          setMovies(newYear);\n          if (newYear.length === 0) {\n            toast.error(\"sorry, that's all the movies we could find\");\n          }\n        } catch (error) {\n          setError(error);\n        } finally {\n          setLoading(false);\n        }\n      };\n\n      fetchMovies();\n    }\n  }, [page, selectedYear]);\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  const yearOptions = [];\n  const currentYear = new Date().getFullYear();\n  for (let year = currentYear; year >= currentYear - 50; year--) {\n    yearOptions.push(year);\n  }\n\n  const hendleIncrement = () => {\n    setPage(page + 1);\n  };\n\n  return (\n    <div className={css.selectedWrapper}>\n      <div className={css.selectedYear}>\n        <label className={css.selectLabel} htmlFor=\"year-select\">\n          Select a year:\n        </label>\n        <div className={css.selectWrapper}>\n          <Select\n            className={css.select}\n            classNamePrefix=\"react-select\"\n            name=\"year-select\"\n            id=\"year-select\"\n            value={{ value: selectedYear, label: selectedYear }}\n            onChange={selectedOption => setSelectedYear(selectedOption.value)}\n            options={yearOptions.map(year => ({ value: year, label: year }))}\n            placeholder=\"Select a year\"\n            menuPlacement=\"auto\"\n          />\n          <div className={css.selectIcon}>\n            <FontAwesomeIcon icon={faFilm} />\n          </div>\n        </div>\n      </div>\n\n      {movies.length > 0 ? (\n        <MoviesList movies={movies} />\n      ) : loading ? (\n        <p>Loading...</p>\n      ) : (\n        <p className={css.searchText}>Please select a year to see movies.</p>\n      )}\n      {showButton && <ButtonLoadMore hendleIncrement={hendleIncrement} />}\n    </div>\n  );\n}\n\nexport default SearchByYears;\n","import css from './MoviesBar.module.css';\nimport { Link, useLocation } from 'react-router-dom';\nimport SearchByYears from 'components/SearchByYear/SearchByYear';\n\nfunction MoviesBar() {\n  const location = useLocation();\n\n  return (\n    <div className={css.movieBarWrapper}>\n      <ul className={css.movieBarList}>\n        <li className={css.movieBarListItem}>\n          <Link to={`/movie/actors/`} state={{ from: location }}>\n            Actors\n          </Link>\n        </li>\n      </ul>\n      <div>\n        <SearchByYears />\n      </div>\n    </div>\n  );\n}\nexport default MoviesBar;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport css from './MoviePage.module.css';\nimport Searchbar from 'components/Searchbar/Searchbar';\nimport Container from 'components/Container/Container';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport MoviesBar from 'components/MoviesBar/MoviesBar';\n\nconst MoviePage = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [currentPage, setCurrentPage] = useState(0);\n  const [hasMore, setHasMore] = useState(false);\n\n  const fetchMovies = useCallback(\n    page => {\n      setHasMore(true);\n      apiTheMovieDB\n        .fetchSearchMovie(query, page)\n        .then(newMovies => {\n          if (newMovies.length === 0) {\n            toast.error(\"sorry, that's all the movies we could find\");\n            setHasMore(false);\n          } else {\n            setMovies(prevMovies => [...prevMovies, ...newMovies]);\n            setCurrentPage(page);\n          }\n        })\n        .catch(error => {\n          toast.error('Failed to fetch movies.');\n        });\n    },\n    [query]\n  );\n\n  useEffect(() => {\n    setQuery(new URLSearchParams(location.search).get('query'));\n    setCurrentPage(1);\n  }, [location.search]);\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n    fetchMovies(1);\n  }, [fetchMovies, query]);\n\n  const handleFormSubmit = newQuery => {\n    if (newQuery === query) {\n      return;\n    }\n    setMovies([]);\n    navigate(`?query=${newQuery}`);\n  };\n\n  const handleLoadMore = () => {\n    fetchMovies(currentPage + 1);\n  };\n\n  return (\n    <>\n      <Container>\n        <section className={css.searchbar}>\n          <Searchbar onSubmit={handleFormSubmit} />\n          <MoviesBar />\n        </section>\n        <section className={css.moviesListSearch}>\n          {movies && (\n            <InfiniteScroll\n              dataLength={movies.length}\n              next={handleLoadMore}\n              hasMore={hasMore}\n              loader={<p>Loading...</p>}\n            >\n              <MoviesList movies={movies} />\n            </InfiniteScroll>\n          )}\n        </section>\n      </Container>\n    </>\n  );\n};\n\nexport default MoviePage;\n","import axios from 'axios';\nconst URL = `https://api.themoviedb.org/3/`;\nconst key = 'f27eea818d2010463700365b0c06a16e';\n\nfunction fetchTrending(page = 1) {\n  return axios\n    .get(`${URL}trending/all/day?api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchSearchMovie(query, page = 1) {\n  return axios\n    .get(`${URL}search/movie?query=${query}&api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchMovieDetalis(id) {\n  return axios\n    .get(`${URL}movie/${id}?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieCredits(id) {\n  return axios\n    .get(`${URL}movie/${id}/credits?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieReview(id) {\n  return axios\n    .get(`${URL}movie/${id}/reviews?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchTrailerMovies(movieId) {\n  return axios\n    .get(`${URL}movie/${movieId}/videos?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchAllgenres() {\n  return axios\n    .get(`${URL}/genre/movie/list?api_key=${key}`)\n    .then(response => response.data.genres);\n}\n\nfunction fetchByGenre(id, page = 1) {\n  return axios\n    .get(`${URL}/discover/movie?api_key=${key}&with_genres=${id}&page=${page}`)\n    .then(response => response.data);\n}\n\nfunction fetchActors(page = 1, query = '') {\n  const url = query\n    ? `${URL}search/person?api_key=${key}&page=${page}&query=${query}`\n    : `${URL}person/popular?api_key=${key}&page=${page}`;\n  return axios.get(url).then(response => response.data);\n}\n\nfunction fetchMoviesbyActors(id, page = 1) {\n  return axios\n    .get(`${URL}person/${id}/movie_credits?api_key=${key}&page=${page}`)\n    .then(response => response.data.cast);\n}\n\nfunction fetchByYear(page = 1, selectedYear) {\n  return axios\n    .get(\n      `${URL}discover/movie?api_key=${key}&sort_by=popularity.desc&page=${page}&primary_release_year=${selectedYear}`\n    )\n    .then(response => response.data.results);\n}\n\nfunction fetchExpectedMovies() {\n  return axios\n    .get(`${URL}/movie/upcoming?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nconst apiTheMovieDB = {\n  fetchMoviesbyActors,\n  fetchTrending,\n  fetchSearchMovie,\n  fetchMovieDetalis,\n  fetchMovieCredits,\n  fetchMovieReview,\n  fetchTrailerMovies,\n  fetchAllgenres,\n  fetchByGenre,\n  fetchActors,\n  fetchByYear,\n  fetchExpectedMovies,\n};\n\nexport default apiTheMovieDB;\n"],"names":["CardWrapper","styled","ImgWrapper","MoviesImg","CardTitle","RatingStarsContainer","GoldStar","GrayStar","RatingText","RatingNumber","MoviesYear","red","css","yellow","green","RatingBlock","poster_path","title","vote_average","release_date","percentRating","goldStars","Math","floor","ratingStars","Array","from","length","_","i","ratingColor","getRatingColor","ratingClassName","src","alt","width","className","toFixed","slice","movies","location","useLocation","map","index","id","to","state","onSubmit","useState","query","setQuery","e","preventDefault","toast","name","value","type","autoComplete","placeholder","onChange","currentTarget","toLowerCase","trim","hendleIncrement","onClick","selectedYear","setSelectedYear","setMovies","error","setError","loading","setLoading","page","setPage","showButton","setShowButton","useEffect","fetchMovies","apiTheMovieDB","newYear","message","yearOptions","currentYear","Date","getFullYear","year","push","htmlFor","classNamePrefix","label","selectedOption","options","menuPlacement","icon","faFilm","MoviesList","SearchByYear","navigate","useNavigate","currentPage","setCurrentPage","hasMore","setHasMore","useCallback","then","newMovies","prevMovies","catch","URLSearchParams","search","get","Container","newQuery","dataLength","next","loader","URL","key","fetchMoviesbyActors","axios","response","data","cast","fetchTrending","results","fetchSearchMovie","fetchMovieDetalis","fetchMovieCredits","fetchMovieReview","fetchTrailerMovies","movieId","fetchAllgenres","genres","fetchByGenre","fetchActors","url","fetchByYear","fetchExpectedMovies"],"sourceRoot":""}