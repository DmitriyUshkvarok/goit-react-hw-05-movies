{"version":3,"file":"static/js/533.a3046002.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ButtonBack/ButtonBack.module.css?8b4f","components/ButtonBack/ButtonBack.jsx","webpack://react-homework-template/./src/components/MoviesList/MoviesList.module.css?de3d","components/MoviesItem/MoviesItem.styled.js","components/MoviesItem/MoviesItem.jsx","components/MoviesList/MoviesList.jsx","webpack://react-homework-template/./src/pages/ActorsMoviePage/ActorsMoviesPage.module.css?3556","pages/ActorsMoviePage/ActorsMoviePage.jsx","service/kino-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"btnBack\":\"ButtonBack_btnBack__tjozC\"};","import css from './ButtonBack.module.css';\n\nconst ButtonBack = () => {\n  return (\n    <>\n      <button className={css.btnBack} type=\"button\">\n        &#8592; Go Back\n      </button>\n    </>\n  );\n};\n\nexport default ButtonBack;\n","// extracted by mini-css-extract-plugin\nexport default {\"moviesList\":\"MoviesList_moviesList__P6SP5\",\"moviesItem\":\"MoviesList_moviesItem__r+0sq\"};","import styled, { css } from 'styled-components';\n\nexport const CardWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  height: 100%;\n`;\n\nexport const ImgWrapper = styled.div`\n  overflow: hidden;\n  margin-bottom: 5px;\n`;\n\nexport const MoviesImg = styled.img`\n  max-width: 100%;\n  object-fit: cover;\n  transition: transform 0.4s;\n  -webkit-transition: transform 0.4s;\n  -moz-transition: transform 0.4s;\n  -ms-transition: transform 0.4s;\n  -o-transition: transform 0.4s;\n\n  &:hover {\n    transform: scale(1.1);\n    -webkit-transform: scale(1.1);\n    -moz-transform: scale(1.1);\n    -ms-transform: scale(1.1);\n    -o-transform: scale(1.1);\n  }\n`;\n\nexport const CardTitle = styled.h3`\n  max-width: 300px;\n  color: aqua;\n  font-size: 14px;\n  margin-bottom: 0;\n  margin-top: auto;\n`;\n\nexport const RatingStarsContainer = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nexport const GoldStar = styled.span`\n  font-size: 10px;\n  color: gold;\n`;\n\nexport const GrayStar = styled.span`\n  font-size: 10px;\n  color: gray;\n`;\n\nexport const RatingText = styled.p`\n  color: rgb(36, 35, 35);\n  font-size: 10px;\n`;\n\nexport const RatingNumber = styled.span`\n  font-size: 8px;\n`;\n\nexport const MoviesYear = styled.p`\n  color: red;\n  font-weight: bold;\n  font-size: 12px;\n  margin-left: auto;\n`;\n\n/* Задаем разные цвета для рейтингов */\nexport const red = css`\n  background: #f85032;\n  background: -webkit-linear-gradient(to right, #e73827, #f85032);\n  background: linear-gradient(to right, #e73827, #f85032);\n`;\n\nexport const yellow = css`\n  background: #f7971e;\n  background: -webkit-linear-gradient(to right, #ffd200, #f7971e);\n  background: linear-gradient(to right, #ffd200, #f7971e);\n  color: rgb(36, 35, 35);\n`;\n\nexport const green = css`\n  background: #000000;\n  background: -webkit-linear-gradient(to right, #0f9b0f, #000000);\n  background: linear-gradient(to right, #0f9b0f, #000000);\n  color: #fff;\n`;\n\nexport const RatingBlock = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border-radius: 50%;\n  width: 10px;\n  heigth: 10px;\n  padding: 5px;\n  font-weight: bold;\n  margin-left: 10px;\n\n  // добавляем стили для класса rating-red\n  &.rating-red {\n    ${red}\n  }\n\n  // добавляем стили для класса rating-yellow\n  &.rating-yellow {\n    ${yellow}\n  }\n\n  // добавляем стили для класса rating-green\n  &.rating-green {\n    ${green}\n  }\n`;\n","import {\n  CardWrapper,\n  ImgWrapper,\n  MoviesImg,\n  CardTitle,\n  RatingStarsContainer,\n  GoldStar,\n  GrayStar,\n  RatingText,\n  RatingNumber,\n  RatingBlock,\n  MoviesYear,\n} from './MoviesItem.styled';\n\nfunction MoviesItem({ poster_path, title, vote_average, release_date }) {\n  const percentRating = vote_average * 10; // convert 0-10 rating to percentage\n  const goldStars = Math.floor(percentRating / 10); // number of gold stars\n  // eslint-disable-next-line no-unused-vars\n  const grayStars = 10 - goldStars; // number of gray stars\n\n  // create an array of stars with the appropriate color\n  const ratingStars = Array.from({ length: 10 }, (_, i) => {\n    if (i < goldStars) {\n      return <GoldStar key={`star-${i}`}>&#9733;</GoldStar>;\n    } else {\n      return <GrayStar key={`star-${i}`}>&#9733;</GrayStar>;\n    }\n  });\n\n  const getRatingColor = vote_average => {\n    if (vote_average <= 4) {\n      return 'red';\n    } else if (vote_average < 7) {\n      return 'yellow';\n    } else {\n      return 'green';\n    }\n  };\n\n  const ratingColor = getRatingColor(vote_average);\n  const ratingClassName = `rating-${ratingColor}`;\n\n  return (\n    <>\n      <CardWrapper>\n        <ImgWrapper>\n          <MoviesImg\n            src={\n              poster_path\n                ? `https://image.tmdb.org/t/p/w500/${poster_path}`\n                : 'https://via.placeholder.com/300x400'\n            }\n            alt={title}\n            width={300}\n          />\n        </ImgWrapper>\n        <CardTitle>{title ? title : 'Movie without a title'}</CardTitle>\n        <RatingStarsContainer>\n          <RatingText>{vote_average ? ratingStars : 'N/A'}</RatingText>\n          <RatingBlock className={ratingClassName}>\n            <RatingNumber>\n              {vote_average ? vote_average.toFixed(1) : 'N/A'}\n            </RatingNumber>\n          </RatingBlock>\n          <MoviesYear>\n            {release_date ? release_date.slice(0, 4) : 'N/A'}\n          </MoviesYear>\n        </RatingStarsContainer>\n      </CardWrapper>\n    </>\n  );\n}\n\nexport default MoviesItem;\n","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport css from './MoviesList.module.css';\nimport MoviesItem from 'components/MoviesItem/MoviesItem';\n\nfunction MoviesList({ movies }) {\n  const location = useLocation();\n  return (\n    <ul className={css.moviesList}>\n      {movies.map(\n        ({ id, poster_path, title, vote_average, release_date }, index) => (\n          <li key={`${id}-${index}`} className={css.moviesItem}>\n            <Link to={`/movies/${id}`} state={{ from: location }}>\n              <MoviesItem\n                key={id}\n                id={id}\n                poster_path={poster_path}\n                title={title}\n                vote_average={vote_average}\n                release_date={release_date}\n              />\n            </Link>\n          </li>\n        )\n      )}\n    </ul>\n  );\n}\nexport default MoviesList;\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ).isRequired,\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"btnBackWrapper\":\"ActorsMoviesPage_btnBackWrapper__Xflc6\"};","import { useState, useEffect } from 'react';\nimport apiTheMovieDB from 'service/kino-api';\nimport ButtonBack from 'components/ButtonBack/ButtonBack';\nimport css from './ActorsMoviesPage.module.css';\nimport { toast } from 'react-toastify';\nimport Container from 'components/Container/Container';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\n\nconst ActorsMoviePage = () => {\n  const { id } = useParams();\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  const navigate = useNavigate();\n  // eslint-disable-next-line no-unused-vars\n  const handleGoBack = () => {\n    navigate('/movie/actors/');\n  };\n\n  useEffect(() => {\n    apiTheMovieDB\n      .fetchMoviesbyActors(id)\n      .then(movies => {\n        setMovies(movies);\n        if (movies.length === 0) {\n          toast.error(\"sorry, that's all the actors we could find\");\n        }\n      })\n      .catch(error => {\n        setError(error);\n      })\n      .finally(() => setLoading(false));\n  }, [id]);\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n  return (\n    <>\n      <Container>\n        <div className={css.btnBackWrapper}>\n          <Link to={'/movie/actors/'}>\n            <ButtonBack />\n          </Link>\n        </div>\n        {loading ? (\n          <p>Loading...</p>\n        ) : (\n          <div className={css.actorsMovies}>\n            {}\n            <MoviesList movies={movies} />\n          </div>\n        )}\n      </Container>\n      ;\n    </>\n  );\n};\n\nexport default ActorsMoviePage;\n","import axios from 'axios';\nconst URL = `https://api.themoviedb.org/3/`;\nconst key = 'f27eea818d2010463700365b0c06a16e';\n\nfunction fetchTrending(page = 1) {\n  return axios\n    .get(`${URL}trending/all/day?api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchSearchMovie(query, page = 1) {\n  return axios\n    .get(`${URL}search/movie?query=${query}&api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchMovieDetalis(id) {\n  return axios\n    .get(`${URL}movie/${id}?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieCredits(id) {\n  return axios\n    .get(`${URL}movie/${id}/credits?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieReview(id) {\n  return axios\n    .get(`${URL}movie/${id}/reviews?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchTrailerMovies(movieId) {\n  return axios\n    .get(`${URL}movie/${movieId}/videos?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchAllgenres() {\n  return axios\n    .get(`${URL}/genre/movie/list?api_key=${key}`)\n    .then(response => response.data.genres);\n}\n\nfunction fetchByGenre(id, page = 1) {\n  return axios\n    .get(`${URL}/discover/movie?api_key=${key}&with_genres=${id}&page=${page}`)\n    .then(response => response.data);\n}\n\nfunction fetchActors(page = 1, query = '') {\n  const url = query\n    ? `${URL}search/person?api_key=${key}&page=${page}&query=${query}`\n    : `${URL}person/popular?api_key=${key}&page=${page}`;\n  return axios.get(url).then(response => response.data);\n}\n\nfunction fetchMoviesbyActors(id, page = 1) {\n  return axios\n    .get(`${URL}person/${id}/movie_credits?api_key=${key}&page=${page}`)\n    .then(response => response.data.cast);\n}\n\nfunction fetchByYear(page = 1, selectedYear) {\n  return axios\n    .get(\n      `${URL}discover/movie?api_key=${key}&sort_by=popularity.desc&page=${page}&primary_release_year=${selectedYear}`\n    )\n    .then(response => response.data.results);\n}\n\nfunction fetchExpectedMovies() {\n  return axios\n    .get(`${URL}/movie/upcoming?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nconst apiTheMovieDB = {\n  fetchMoviesbyActors,\n  fetchTrending,\n  fetchSearchMovie,\n  fetchMovieDetalis,\n  fetchMovieCredits,\n  fetchMovieReview,\n  fetchTrailerMovies,\n  fetchAllgenres,\n  fetchByGenre,\n  fetchActors,\n  fetchByYear,\n  fetchExpectedMovies,\n};\n\nexport default apiTheMovieDB;\n"],"names":["className","css","type","CardWrapper","styled","ImgWrapper","MoviesImg","CardTitle","RatingStarsContainer","GoldStar","GrayStar","RatingText","RatingNumber","MoviesYear","red","yellow","green","RatingBlock","poster_path","title","vote_average","release_date","percentRating","goldStars","Math","floor","ratingStars","Array","from","length","_","i","ratingColor","getRatingColor","ratingClassName","src","alt","width","toFixed","slice","movies","location","useLocation","map","index","id","to","state","useParams","useState","setMovies","error","setError","loading","setLoading","useNavigate","useEffect","apiTheMovieDB","then","toast","catch","finally","message","Container","ButtonBack","MoviesList","URL","key","fetchMoviesbyActors","page","axios","response","data","cast","fetchTrending","results","fetchSearchMovie","query","fetchMovieDetalis","fetchMovieCredits","fetchMovieReview","fetchTrailerMovies","movieId","fetchAllgenres","genres","fetchByGenre","fetchActors","url","fetchByYear","selectedYear","fetchExpectedMovies"],"sourceRoot":""}