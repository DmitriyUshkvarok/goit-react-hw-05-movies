{"version":3,"file":"static/js/464.1f0f1e8a.chunk.js","mappings":"4MACA,EAAiC,iC,qECqDjC,MA9CA,WACE,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAsCF,EAAAA,EAAAA,UAAS,GAA/C,eAAOG,EAAP,KAAoBC,EAApB,KACA,GAAoCJ,EAAAA,EAAAA,WAAS,GAA7C,eAAOK,EAAP,KAAmBC,EAAnB,KAEMC,GAAcC,EAAAA,EAAAA,cAAY,WAC9BF,GAAc,GAEdG,EAAAA,EAAAA,cACiBN,GACdO,MAAK,SAAAC,GACJL,GAAc,GACW,IAArBK,EAAUC,QACZC,EAAAA,GAAAA,MAAY,4CAGdX,GAAU,SAAAY,GAAU,wBAAQA,IAAR,OAAuBH,GAAvB,IACpBP,GAAe,SAAAW,GAAQ,OAAIA,EAAW,CAAf,GACxB,IACAC,OAAM,SAAAC,GACLX,GAAc,EACf,GACJ,GAAE,CAACH,IAQJ,OANAe,EAAAA,EAAAA,YAAU,WACc,IAAlBjB,EAAOW,QACTL,GAEH,GAAE,CAACN,EAAQM,KAGV,oBAASY,UAAWC,EAApB,UACE,SAACC,EAAA,EAAD,WACE,SAAC,IAAD,CACEC,WAAYrB,EAAOW,OACnBW,KAAMhB,EACNiB,SAAUnB,EACVoB,QAAQ,sCAJV,UAME,SAACC,EAAA,EAAD,CAAYzB,OAAQA,SAK7B,C","sources":["webpack://react-homework-template/./src/pages/HomePage/HomePage.module.css?5baa","pages/HomePage/HomePage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"trandingMovies\":\"HomePage_trandingMovies__2UC1J\"};","import css from './HomePage.module.css';\nimport Container from 'components/Container/Container';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { useState, useEffect, useCallback } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\n\nfunction HomePage() {\n  const [movies, setMovies] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [isFetching, setIsFetching] = useState(false);\n\n  const fetchMovies = useCallback(() => {\n    setIsFetching(true);\n\n    apiTheMovieDB\n      .fetchTrending(currentPage)\n      .then(newMovies => {\n        setIsFetching(false);\n        if (newMovies.length === 0) {\n          toast.error('sorry ,thats all the movies we cold find');\n        }\n\n        setMovies(prevMovies => [...prevMovies, ...newMovies]);\n        setCurrentPage(prevPage => prevPage + 1);\n      })\n      .catch(error => {\n        setIsFetching(false);\n      });\n  }, [currentPage]);\n\n  useEffect(() => {\n    if (movies.length === 0) {\n      fetchMovies();\n    }\n  }, [movies, fetchMovies]);\n\n  return (\n    <section className={css.trandingMovies}>\n      <Container>\n        <InfiniteScroll\n          dataLength={movies.length}\n          next={fetchMovies}\n          hasMore={!isFetching}\n          loader={<p>Loading...</p>}\n        >\n          <MoviesList movies={movies} />\n        </InfiniteScroll>\n      </Container>\n    </section>\n  );\n}\n\nexport default HomePage;\n"],"names":["useState","movies","setMovies","currentPage","setCurrentPage","isFetching","setIsFetching","fetchMovies","useCallback","apiTheMovieDB","then","newMovies","length","toast","prevMovies","prevPage","catch","error","useEffect","className","css","Container","dataLength","next","hasMore","loader","MoviesList"],"sourceRoot":""}