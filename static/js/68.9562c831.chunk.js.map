{"version":3,"file":"static/js/68.9562c831.chunk.js","mappings":"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","sources":["pages/ActorsPage/ActorsPage.module.css","pages/ActorsPage/ActorsPage.jsx","service/kino-api.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","import { useState, useEffect } from 'react';\nimport css from './ActorsPage.module.css';\nimport Container from 'components/Container/Container';\nimport apiTheMovieDB from 'service/kino-api';\nimport { toast } from 'react-toastify';\nimport posterimg from '../../images/poster.jpeg';\n\nfunction ActorsPage() {\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchActors = async () => {\n      try {\n        const newActors = await apiTheMovieDB.fetchActors();\n        if (newActors.length === 0) {\n          toast.error(\"sorry, that's all the movies we could find\");\n        }\n        setActors(newActors);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchActors();\n  }, []);\n\n  if (error) {\n    return <p>{error.message}</p>;\n  }\n\n  return (\n    <Container>\n      {loading ? (\n        <p>Loading...</p>\n      ) : (\n        <ul className={css.actorList}>\n          {actors.map(\n            (\n              { profile_path, name, known_for_department, popularity, id },\n              index\n            ) => (\n              <li key={`${id}-${index}`}>\n                <img\n                  src={\n                    profile_path\n                      ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n                      : posterimg\n                  }\n                  alt={name}\n                  width={100}\n                />\n                <p>{name}</p>\n                <p>{known_for_department}</p>\n                <p>{popularity}</p>\n              </li>\n            )\n          )}\n        </ul>\n      )}\n    </Container>\n  );\n}\n\nexport default ActorsPage;\n","import axios from 'axios';\nconst URL = `https://api.themoviedb.org/3/`;\nconst key = 'f27eea818d2010463700365b0c06a16e';\n\nfunction fetchTrending(page = 1) {\n  return axios\n    .get(`${URL}trending/all/day?api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchSearchMovie(query, page = 1) {\n  return axios\n    .get(`${URL}search/movie?query=${query}&api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchMovieDetalis(id) {\n  return axios\n    .get(`${URL}movie/${id}?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieCredits(id) {\n  return axios\n    .get(`${URL}movie/${id}/credits?api_key=${key}`)\n    .then(response => response.data);\n}\n\nfunction fetchMovieReview(id) {\n  return axios\n    .get(`${URL}movie/${id}/reviews?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchTrailerMovies(movieId) {\n  return axios\n    .get(`${URL}movie/${movieId}/videos?api_key=${key}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchAllgenres() {\n  return axios\n    .get(`${URL}/genre/movie/list?api_key=${key}`)\n    .then(response => response.data.genres);\n}\n\nfunction fetchByGenre(id, page = 1) {\n  return axios\n    .get(`${URL}/discover/movie?api_key=${key}&with_genres=${id}&page=${page}`)\n    .then(response => response.data);\n}\n\nfunction fetchActors(page = 1) {\n  return axios\n    .get(`${URL}person/popular?api_key=${key}&page=${page}`)\n    .then(response => response.data.results);\n}\n\nfunction fetchByYear(page = 1, selectedYear) {\n  return axios\n    .get(\n      `${URL}discover/movie?api_key=${key}&sort_by=popularity.desc&page=${page}&primary_release_year=${selectedYear}`\n    )\n    .then(response => response.data.results);\n}\n// fetchByYear();\n\nconst apiTheMovieDB = {\n  fetchTrending,\n  fetchSearchMovie,\n  fetchMovieDetalis,\n  fetchMovieCredits,\n  fetchMovieReview,\n  fetchTrailerMovies,\n  fetchAllgenres,\n  fetchByGenre,\n  fetchActors,\n  fetchByYear,\n};\n\nexport default apiTheMovieDB;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["useState","actors","setActors","loading","setLoading","error","setError","useEffect","fetchActors","apiTheMovieDB","newActors","length","toast","message","Container","className","css","map","index","profile_path","name","known_for_department","popularity","id","src","posterimg","alt","width","URL","key","fetchTrending","page","axios","then","response","data","results","fetchSearchMovie","query","fetchMovieDetalis","fetchMovieCredits","fetchMovieReview","fetchTrailerMovies","movieId","fetchAllgenres","genres","fetchByGenre","fetchByYear","selectedYear","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","value","done","Promise","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}